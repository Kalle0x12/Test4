diff -Naur paralution-1.1.0/src/base/backend_manager.cpp myparalution-1.1.0/src/base/backend_manager.cpp
--- paralution-1.1.0/src/base/backend_manager.cpp	2016-01-19 08:14:41.000000000 +0100
+++ myparalution-1.1.0/src/base/backend_manager.cpp	2016-12-03 17:47:14.207097255 +0100
@@ -768,7 +768,8 @@
               Paralution_Object_Data_Tracking.all_obj[i]);
 
   }
-
+  // Hotfix: https://www.paralution.com/forums/topic/second-initialization-throws-error/
+  Paralution_Object_Data_Tracking.all_obj.clear();
   LOG_DEBUG(0, "_paralution_delete_all_obj()",
             "* end");
 #endif
diff -Naur paralution-1.1.0/src/base/local_matrix.cpp myparalution-1.1.0/src/base/local_matrix.cpp
--- paralution-1.1.0/src/base/local_matrix.cpp	2016-01-19 08:14:41.000000000 +0100
+++ myparalution-1.1.0/src/base/local_matrix.cpp	2016-12-03 17:47:14.208097248 +0100
@@ -1551,6 +1551,36 @@
 }
 
 template <typename ValueType>
+void LocalMatrix<ValueType>::MyMoveToAccelerator(void) {
+
+  LOG_DEBUG(this, "LocalMatrix::MyMoveToAccelerator()",
+            "");
+
+#ifdef DEBUG_MODE
+  this->Check();
+#endif
+
+  if (_paralution_available_accelerator() == false)
+    LOG_VERBOSE_INFO(4,"*** info: LocalMatrix::MyMoveToAccelerator() no accelerator available - doing nothing");
+
+  if ( (_paralution_available_accelerator()) && (this->matrix_ == this->matrix_host_)) {
+
+    this->matrix_accel_ = _paralution_init_base_backend_matrix<ValueType>(this->local_backend_, this->get_format());
+    this->matrix_accel_->CopyFrom(*this->matrix_host_);
+
+    this->matrix_ = this->matrix_accel_;
+    //delete this->matrix_host_;
+    //this->matrix_host_ = NULL;
+
+    LOG_VERBOSE_INFO(4, "*** info: LocalMatrix::MyMoveToAccelerator() host to accelerator transfer");
+
+  }
+
+  // if on accelerator - do nothing
+
+}
+
+template <typename ValueType>
 void LocalMatrix<ValueType>::MoveToHost(void) {
 
   LOG_DEBUG(this, "LocalMatrix::MoveToHost()",
diff -Naur paralution-1.1.0/src/base/local_matrix.hpp myparalution-1.1.0/src/base/local_matrix.hpp
--- paralution-1.1.0/src/base/local_matrix.hpp	2016-01-19 08:14:41.000000000 +0100
+++ myparalution-1.1.0/src/base/local_matrix.hpp	2016-12-03 17:47:14.209097240 +0100
@@ -283,6 +283,7 @@
   void WriteFileCSR(const std::string filename) const;
   
   virtual void MoveToAccelerator(void);
+  virtual void MyMoveToAccelerator(void);
   virtual void MoveToAcceleratorAsync(void);
   virtual void MoveToHost(void);
   virtual void MoveToHostAsync(void);
diff -Naur paralution-1.1.0/src/base/local_vector.cpp myparalution-1.1.0/src/base/local_vector.cpp
--- paralution-1.1.0/src/base/local_vector.cpp	2016-01-19 08:14:41.000000000 +0100
+++ myparalution-1.1.0/src/base/local_vector.cpp	2016-12-05 19:47:43.882094759 +0100
@@ -177,7 +177,7 @@
 
 template <typename ValueType>
 void LocalVector<ValueType>::SetDataPtr(ValueType **ptr, std::string name, const int size) {
-
+  LOG_DEBUG(this, "LocalVector::SetDataPtr()", "");
   assert(*ptr != NULL);
   assert(size > 0);
 
@@ -384,6 +384,33 @@
 }
 
 template <typename ValueType>
+void LocalVector<ValueType>::MyMoveToAccelerator(void) {
+
+  LOG_DEBUG(this, "LocalVector::MyMoveToAccelerator()",
+            "");
+
+  if (_paralution_available_accelerator() == false)
+    LOG_VERBOSE_INFO(4,"*** info: LocalVector::MyMoveToAccelerator() no accelerator available - doing nothing");
+
+  if ( (_paralution_available_accelerator() == true) &&
+       (this->vector_ == this->vector_host_)) {
+
+    this->vector_accel_ = _paralution_init_base_backend_vector<ValueType>(this->local_backend_);
+
+    // Copy to accel
+    this->vector_accel_->CopyFrom(*this->vector_host_);
+
+    this->vector_ = this->vector_accel_;
+    //delete this->vector_host_;
+    //this->vector_host_ = NULL;
+
+    LOG_VERBOSE_INFO(4, "*** info: LocalVector::MyMoveToAccelerator() host to accelerator transfer");
+
+  }
+
+}
+
+template <typename ValueType>
 void LocalVector<ValueType>::MoveToHost(void) {
 
   LOG_DEBUG(this, "LocalVector::MoveToHost()",
@@ -411,6 +438,34 @@
 }
 
 template <typename ValueType>
+void LocalVector<ValueType>::MyMoveToHost(ValueType **ptr, const int size) {
+
+  LOG_DEBUG(this, "LocalVector::MyMoveToHost()",
+            "");
+
+  if (_paralution_available_accelerator() == false)
+    LOG_VERBOSE_INFO(4,"*** info: LocalVector::MyMoveToHost() no accelerator available - doing nothing");
+
+  if ( (_paralution_available_accelerator() == true) &&
+       (this->vector_ == this->vector_accel_)) {
+
+    this->vector_host_ = new HostVector<ValueType>(this->local_backend_);
+    this->vector_host_->SetDataPtr(ptr, size);
+
+    // Copy to host
+    this->vector_host_->CopyFrom(*this->vector_accel_);
+
+    this->vector_ = this->vector_host_;
+    delete this->vector_accel_;
+    this->vector_accel_ = NULL;
+
+    LOG_VERBOSE_INFO(4, "*** info: LocalVector::MyMoveToHost() accelerator to host transfer");
+
+  }
+
+}
+
+template <typename ValueType>
 void LocalVector<ValueType>::MoveToAcceleratorAsync(void) {
 
   LOG_DEBUG(this, "LocalVector::MoveToAcceleratorAsync()",
diff -Naur paralution-1.1.0/src/base/local_vector.hpp myparalution-1.1.0/src/base/local_vector.hpp
--- paralution-1.1.0/src/base/local_vector.hpp	2016-01-19 08:14:41.000000000 +0100
+++ myparalution-1.1.0/src/base/local_vector.hpp	2016-12-05 19:50:25.126769410 +0100
@@ -56,8 +56,10 @@
   virtual ~LocalVector();
 
   virtual void MoveToAccelerator(void);
+  virtual void MyMoveToAccelerator(void);
   virtual void MoveToAcceleratorAsync(void);
   virtual void MoveToHost(void);
+  virtual void MyMoveToHost(ValueType **ptr, const int size);
   virtual void MoveToHostAsync(void);
   virtual void Sync(void);
 
