language: cpp
#dist: trusty
dist: precise
sudo: false
matrix:
  include:
  - os: linux
    env: PYTHON=2.7 CPPV=11 GCC=4.8
    addons:
      apt:
        packages: [cmake=2.\*, cmake-data=2.\*]
  - os: linux
    env: PYTHON=3.6 CPPV=11 GCC=4.8
    addons:
      apt:
        sources: [deadsnakes]
        packages: [python3.6-dev python3.6-venv, cmake=2.\*, cmake-data=2.\*]
  - sudo: true
    services: docker
    env: PYTHON=2.7 CPPV=14 GCC=6
  - sudo: true
    services: docker
    env: PYTHON=3.5 CPPV=14 GCC=6
  - os: osx
    osx_image: xcode7.3
    env: PYTHON=2.7 CPPV=14 CLANG
  - os: osx
    osx_image: xcode7.3
    env: PYTHON=3.5 CPPV=14 CLANG
before_install:
- |
  # Configure build variables
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
    if [ -z "$GCC" ]; then export GCC=4.8; fi
    export CXX=g++-$GCC CC=gcc-$GCC;
    if [ "$GCC" = "6" ]; then export DOCKER=debian:testing CXX=g++ CC=gcc; fi
  elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
    export CXX=clang++ CC=clang;
  fi
  if [ -n "$CPPV" ]; then export CPPV=-std=c++$CPPV; fi
  if [ "${PYTHON:0:1}" = "3" ]; then export PY=3; fi
- |
  # Initialize enviornment
  if [ -n "$DOCKER" ]; then
    docker pull $DOCKER
    # Disable LTO with gcc until gcc 79296 is fixed:
    export CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DPYBIND11_LTO_CXX_FLAGS="
    export containerid=$(docker run --detach --tty \
      --volume="$PWD":/pybind11 --workdir=/pybind11 \
      --env="CC=$CC" --env="CXX=$CXX" --env="DEBIAN_FRONTEND=$DEBIAN_FRONTEND" \
      --env=GCC_COLORS=\  \
      $DOCKER)
    docker exec --tty "$containerid" sh -c 'for s in 0 15; do sleep $s; apt-get update && apt-get -qy dist-upgrade && break; done'
    export SCRIPT_RUN_PREFIX="docker exec --tty $containerid"
  else
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pip install --user --upgrade pip virtualenv
      virtualenv -p python$PYTHON venv
    elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      #brew update; brew tap homebrew/boneyard; brew install clang-omp;
      if [ "$PY" = "3" ]; then
        brew update; brew install python$PY;
      else
        curl -fsSL -O https://bootstrap.pypa.io/get-pip.py
        sudo -H python get-pip.py
      fi
      pip$PY install --user --upgrade pip virtualenv
      python$PY -m virtualenv venv
    fi
    source venv/bin/activate
  fi
install:
- "# Install dependencies\nif [ -n \"$DOCKER\" ]; then\n  docker exec --tty \"$containerid\"
  sh -c \"for s in 0 15; do sleep \\$s; apt-get -qy --no-install-recommends install
  \\\n    python$PYTHON-dev python$PY-pytest python$PY-scipy python$PY-numpy python$PY-setuptools
  \\\n    libeigen3-dev cmake make g++ git-all wget patch && break; done\"\nelse\n  pip
  install numpy scipy pytest\n  \n  wget -q -O eigen.tar.gz https://bitbucket.org/eigen/eigen/get/3.3.0.tar.gz\n
  \ tar xzf eigen.tar.gz\n  export CMAKE_EXTRA_ARGS=\"${CMAKE_EXTRA_ARGS} -DCMAKE_INCLUDE_PATH=$PWD/eigen-eigen-26667be4f70b\"
  \   \nfi\n"
script:
- "$SCRIPT_RUN_PREFIX pwd"
- "$SCRIPT_RUN_PREFIX  ./install-paralution.sh"
- "$SCRIPT_RUN_PREFIX  echo $LD_LIBRARY_PATH"
- "$SCRIPT_RUN_PREFIX pwd"
- "$SCRIPT_RUN_PREFIX ls -alh"
- "$SCRIPT_RUN_PREFIX echo $PYTHON"
- "$SCRIPT_RUN_PREFIX echo $CPPV"
- "$SCRIPT_RUN_PREFIX ./install-pybind11.sh $PYTHON $CPPV ${CMAKE_EXTRA_ARGS}"
- "$SCRIPT_RUN_PREFIX pwd"
- "$SCRIPT_RUN_PREFIX ls -alh"
- "$SCRIPT_RUN_PREFIX ./clean.sh"
- "$SCRIPT_RUN_PREFIX python$PY --version"
- |
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      $SCRIPT_RUN_PREFIX python$PY build.py build_ext --inplace
   elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      $SCRIPT_RUN_PREFIX python$PY build_mac.py build_ext --inplace
   fi
- "$SCRIPT_RUN_PREFIX ls -alh"
- "$SCRIPT_RUN_PREFIX ./run_test.sh python$PY"
after_script:
- if [ -n "$DOCKER" ]; then docker stop "$containerid"; docker rm "$containerid";
  fi
notifications:
  email:
    recipients:
      secure: SoG6KL0WPb9MrQFNcDaX5F2hCPo+vivtBC1LLeYIDycGP/J2cqwzimWPtL30BphuX54TKAUMllWPSBtQXKE32DKCkpYdhq0WGPQqtUlQkn0N0LQK5rQk3zYMM9ZA3dWF6r0AC51kGOgbuD7WlKXYOfp8ukejlk+q2ILovBa4CIZNXVtyUX+hXuRfbtQtjxyEeb7521PxJhG13MvUux/cOQlZjyg4EM6oNGx+778t0LPGCGUh4pKUY5MQelBsw79m/GAEJveQbLkzJIKS71B1+Q+pkSjNcVsW/8hkob8l1NzteOvkzcsxjgr2zLpB1CcsJPKBn8oGU7vQBSqlS/KC/7iCZELHRWK7zS+wlU3Rm5CNS18MEeWtwkUKt699bfVgyrlTvq8x2igUfylVnMaJmEFORksMtnXFKjHVxB/EdzxxW13SOV5Kcr3qQWy5Ya3XdlZULGTdX5qX9EWmgVzSZJilaa3iOW671bWG3Tob07OW79WOaIYMALtWv+J1ty7FnoLstDu+WczArqnfbYApANDlmKynR7Y1GdE4uUsxYcb8WWJF3VlrHWs7FCvpr+/fvlqPF077bh2Tf5wDgBOjqOHrSNYXWORFjjWiOUdrhOeHJXofuWhYn0La5fTrove5mDndc/S+pVNO2JCr8N/gS7ia4BSsvPWyGmaZzvo9/mg=
    on_success: always
    on_failure: always
